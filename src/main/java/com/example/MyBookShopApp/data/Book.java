package com.example.MyBookShopApp.data;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sun.istack.NotNull;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.hibernate.annotations.Type;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @ApiModelProperty("id generated by db automaticaly")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @ManyToOne
    @JsonIgnore
    @JoinColumn(name = "author_id", referencedColumnName = "id")
    private Author author;

    public Integer discountPrice(){
        return Math.toIntExact(Math.round(priceOld-(0.01*price*priceOld)));
    }

    public Integer intDiscount(){
        return Math.toIntExact(Math.round(price));
    }

    @JsonGetter("authors")
    public String authorsFullName(){
        return author.toString();
    }


@NotNull
@ApiModelProperty("book title")
    private String title;

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

//    @Transient
    @Column(name = "price")
    @JsonProperty("price")
    @ApiModelProperty("price without discount")
    private Double priceOld;

//    @NotNull
    @Column(name = "discount")
    @JsonProperty("discount")
    @ApiModelProperty("discount for book")
    private Double price;

//    @NotNull
    @Column(name = "pub_date")
    @ApiModelProperty("date of book publication")
    private Date pubDate;

//    @NotNull
    @Column(name = "is_bestseller")
    @ApiModelProperty("if equals 1, then book is bestseller")
    private Integer isBestseller;

//    @NotNull
@ApiModelProperty("mnemonical id sequence of characters")
    private String slug;

    @ApiModelProperty("image url")
    private String image;

    @Type(type = "org.hibernate.type.TextType")
    @ApiModelProperty("book description text")
    private String description;

    @ManyToOne
    @JsonIgnore
    @JoinColumn(name = "tag_id", referencedColumnName = "id")
    private Tag tag;

    @ManyToOne
    @JsonIgnore
    @JoinColumn(name = "genre_id", referencedColumnName = "id")
    private Genre genre;

    public Genre getGenre() {
        return genre;
    }

    public void setGenre(Genre genre) {
        this.genre = genre;
    }

    public Tag getTag() {
        return tag;
    }



    public void setTag(Tag tag) {
        this.tag = tag;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }




    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Double getPriceOld() {
        return priceOld;
    }

    public void setPriceOld(Double priceOld) {
        this.priceOld = priceOld;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Date getPub_date() {
        return pubDate;
    }

    public void setPub_date(Date pub_date) {
        this.pubDate = pubDate;
    }

    public Integer getIs_bestseller() {
        return isBestseller;
    }

    public void setIs_bestseller(Integer is_bestseller) {
        this.isBestseller = is_bestseller;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String text) {
        this.description = text;
    }



    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", author=" + author +
                ", tag=" + tag +
                ", genre=" + genre +
                ", title='" + title + '\'' +
                ", priceOld='" + priceOld + '\'' +
                ", price='" + price + '\'' +
                ", pubDate=" + pubDate +
                ", isBestseller=" + isBestseller +
                ", slug='" + slug + '\'' +
                ", image='" + image + '\'' +
                ", text='" + description + '\'' +
                '}';
    }
}
